define(function(require, exports, module){
// Generated by CoffeeScript 1.3.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

$(document).ready(function() {
  var IndexView, PlayView, Router, router;
  if (!Detector.webgl) {
    Detector.addGetWebGLMessage();
    return;
  }
  IndexView = (function(_super) {

    __extends(IndexView, _super);

    IndexView.name = 'IndexView';

    function IndexView() {
      return IndexView.__super__.constructor.apply(this, arguments);
    }

    IndexView.prototype.render = function() {
      var playLink;
      playLink = $('<a/>').attr('href', '#play').text('Play');
      this.$el.append(playLink);
      return this;
    };

    IndexView.prototype.dispose = function() {
      return true;
    };

    return IndexView;

  })(Backbone.View);
  PlayView = (function(_super) {

    __extends(PlayView, _super);

    PlayView.name = 'PlayView';

    function PlayView() {
      return PlayView.__super__.constructor.apply(this, arguments);
    }

    PlayView.prototype.render = function() {
      var Engine,
        _this = this;
      Engine = require('engine/engine');
      this.engine = new Engine({
        container: this.$el.get(0),
        aiPlayers: 1,
        onKeyDown: function(key) {
          return _this.keyDown(key);
        }
      });
      return this;
    };

    PlayView.prototype.dispose = function() {
      return this.engine.dispose();
    };

    PlayView.prototype.keyDown = function(key) {
      if (key === 27) {
        return router.navigate('/', true);
      }
    };

    return PlayView;

  })(Backbone.View);
  Router = (function(_super) {

    __extends(Router, _super);

    Router.name = 'Router';

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      '': 'showIndex',
      'play': 'showPlay'
    };

    Router.prototype.showIndex = function() {
      var indexView;
      indexView = new IndexView;
      return this.changeView(indexView);
    };

    Router.prototype.showPlay = function() {
      var playView;
      playView = new PlayView;
      return this.changeView(playView);
    };

    Router.prototype.changeView = function(view) {
      if (this.currentView) {
        this.currentView.dispose();
      }
      $('body').html(view.render().el);
      return this.currentView = view;
    };

    return Router;

  })(Backbone.Router);
  router = new Router;
  return Backbone.history.start();
});

});
