define(function(require, exports, module){
// Generated by CoffeeScript 1.3.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$(document).ready(function() {
  var IndexView, MainMenu, Menu, PlayView, Router, router;
  require('templates');
  if (!Detector.webgl) {
    Detector.addGetWebGLMessage();
    return;
  }
  IndexView = (function(_super) {

    __extends(IndexView, _super);

    IndexView.name = 'IndexView';

    function IndexView() {
      return IndexView.__super__.constructor.apply(this, arguments);
    }

    IndexView.prototype.render = function() {
      var playLink;
      playLink = $('<a/>').attr('href', '#play').text('Play');
      this.$el.append(playLink);
      return this;
    };

    IndexView.prototype.dispose = function() {
      return true;
    };

    return IndexView;

  })(Backbone.View);
  Menu = (function(_super) {

    __extends(Menu, _super);

    Menu.name = 'Menu';

    function Menu() {
      return Menu.__super__.constructor.apply(this, arguments);
    }

    Menu.prototype.className = 'menu';

    Menu.prototype.width = 600;

    Menu.prototype.height = 600;

    Menu.prototype.render = function() {
      this.$el.append(this.template);
      this.$el.css('width', this.width);
      this.$el.css('height', this.height);
      this.$el.css('left', (window.innerWidth - this.width) / 2);
      this.$el.css('top', (window.innerHeight - this.height) / 2);
      return this;
    };

    Menu.prototype.dispose = function() {
      return this.$el.remove();
    };

    return Menu;

  })(Backbone.View);
  MainMenu = (function(_super) {

    __extends(MainMenu, _super);

    MainMenu.name = 'MainMenu';

    function MainMenu() {
      return MainMenu.__super__.constructor.apply(this, arguments);
    }

    MainMenu.prototype.template = JST['menu/main_menu'];

    return MainMenu;

  })(Menu);
  PlayView = (function(_super) {

    __extends(PlayView, _super);

    PlayView.name = 'PlayView';

    function PlayView() {
      this.keyUp = __bind(this.keyUp, this);

      this.keyDown = __bind(this.keyDown, this);
      return PlayView.__super__.constructor.apply(this, arguments);
    }

    PlayView.prototype.render = function() {
      var Engine;
      Engine = require('engine/engine');
      this.engine = new Engine({
        container: this.$el.get(0),
        aiPlayers: 1,
        onKeyDown: this.keyDown,
        onKeyUp: this.keyUp
      });
      return this;
    };

    PlayView.prototype.dispose = function() {
      return this.engine.dispose();
    };

    PlayView.prototype.keyDown = function(key) {
      if (key === 27) {
        router.navigate('/', true);
      }
      if (key === 65) {
        if (!this.menu) {
          this.menu = new MainMenu;
          this.$el.append(this.menu.render().el);
        }
      }
      return true;
    };

    PlayView.prototype.keyUp = function(key) {
      if (key === 65) {
        if (this.menu) {
          this.menu.dispose();
          this.menu = false;
        }
      }
      return true;
    };

    return PlayView;

  })(Backbone.View);
  Router = (function(_super) {

    __extends(Router, _super);

    Router.name = 'Router';

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      '': 'showIndex',
      'play': 'showPlay'
    };

    Router.prototype.showIndex = function() {
      var indexView;
      indexView = new IndexView;
      return this.changeView(indexView);
    };

    Router.prototype.showPlay = function() {
      var playView;
      playView = new PlayView;
      return this.changeView(playView);
    };

    Router.prototype.changeView = function(view) {
      if (this.currentView) {
        this.currentView.dispose();
      }
      $('body').html(view.render().el);
      return this.currentView = view;
    };

    return Router;

  })(Backbone.Router);
  router = new Router;
  return Backbone.history.start();
});

});
