define(function(require, exports, module){
// Generated by CoffeeScript 1.3.1
var LocalPlayer, MassDriver, Player, Turret,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Player = require('players/player');

Turret = require('weapons/turret');

MassDriver = require('weapons/mass_driver');

LocalPlayer = (function(_super) {

  __extends(LocalPlayer, _super);

  LocalPlayer.name = 'LocalPlayer';

  function LocalPlayer() {
    return LocalPlayer.__super__.constructor.apply(this, arguments);
  }

  LocalPlayer.prototype.step = function() {
    var key, _i, _len, _ref;
    LocalPlayer.__super__.step.apply(this, arguments);
    if (this.ship) {
      _ref = this.universe.keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        switch (key) {
          case 37:
            this.ship.rotateLeft();
            break;
          case 39:
            this.ship.rotateRight();
            break;
          case 38:
            this.ship.forward();
            break;
          case 40:
            this.ship.backward();
            break;
          case 68:
            this.ship.fire();
            break;
          case 81:
            this.buildTurret();
            this.universe.keys = _.without(this.universe.keys, 81);
            break;
          case 87:
            this.buildMassDriver();
            this.universe.keys = _.without(this.universe.keys, 87);
        }
      }
      this.controller.camera.position.x = this.ship.position.x;
      return this.controller.camera.position.y = this.ship.position.y;
    }
  };

  LocalPlayer.prototype.positionFor = function(type) {
    var position;
    position = this.ship.position.clone();
    position.x += Math.sin((Math.PI / 2) - this.ship.rotation) * (type.prototype.radius + (this.ship.radius * 2));
    position.y += Math.cos((Math.PI / 2) - this.ship.rotation) * (type.prototype.radius + (this.ship.radius * 2));
    return position;
  };

  LocalPlayer.prototype.buildTurret = function() {
    var overlap, position, turret;
    position = this.positionFor(Turret);
    overlap = this.universe.anythingOverlaps(position, Turret.prototype.radius);
    if (overlap) {
      return console.log('turret would overlap', overlap);
    } else {
      return turret = new Turret({
        universe: this.universe,
        controller: this.controller,
        position: position,
        parent: this
      });
    }
  };

  LocalPlayer.prototype.buildMassDriver = function() {
    var massdriver, overlap, position;
    position = this.positionFor(MassDriver);
    overlap = this.universe.anythingOverlaps(position, MassDriver.prototype.radius);
    if (overlap) {
      return console.log('mass driver would overlap', overlap);
    } else {
      return massdriver = new MassDriver({
        universe: this.universe,
        controller: this.controller,
        position: position,
        parent: this
      });
    }
  };

  return LocalPlayer;

})(Player);

module.exports = LocalPlayer;

});
