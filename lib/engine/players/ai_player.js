define(function(require, exports, module){
// Generated by CoffeeScript 1.3.1
var AiPlayer, Player,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Player = require('./player');

AiPlayer = (function(_super) {
  var AI_STEP_INTERVAL, FIRE_ANGLE_DIFF_MAX, FIRE_MAX_DISTANCE, ROTATE_ANGLE_DIFF_MAX;

  __extends(AiPlayer, _super);

  AiPlayer.name = 'AiPlayer';

  AI_STEP_INTERVAL = 5;

  ROTATE_ANGLE_DIFF_MAX = Math.PI / 16;

  FIRE_ANGLE_DIFF_MAX = Math.PI / 8;

  FIRE_MAX_DISTANCE = 1000;

  function AiPlayer(options) {
    options.position = new THREE.Vector3(0, 0, 0);
    options.position.x = (Math.random() * 10000) - 5000;
    options.position.y = (Math.random() * 10000) - 5000;
    AiPlayer.__super__.constructor.call(this, options);
    this.aiStepCounter = 0;
    this.angle = 0;
  }

  AiPlayer.prototype.step = function() {
    AiPlayer.__super__.step.apply(this, arguments);
    if (this.ship) {
      if (this.aiStepCounter <= 0) {
        this.aiStep();
        return this.aiStepCounter = AI_STEP_INTERVAL;
      } else {
        this.aiStepCounter--;
        if (Math.abs(this.ship.rotation - this.angle) > ROTATE_ANGLE_DIFF_MAX) {
          if (this.ship.rotation > this.angle) {
            this.ship.rotateRight();
          } else if (this.ship.rotation < this.angle) {
            this.ship.rotateLeft();
          }
        }
        this.ship.forward();
        if (this.fire) {
          return this.ship.fire();
        }
      }
    }
  };

  AiPlayer.prototype.aiStep = function() {
    var vector;
    if (!this.target) {
      this.chooseTarget();
    }
    if (this.target && this.target.ship) {
      vector = this.target.ship.position.clone().subSelf(this.ship.position);
      this.angle = Math.atan2(vector.y, vector.x);
      return this.fire = Math.abs(this.ship.rotation - this.angle) <= FIRE_ANGLE_DIFF_MAX && vector.length() < FIRE_MAX_DISTANCE;
    } else {
      return this.fire = false;
    }
  };

  AiPlayer.prototype.chooseTarget = function() {
    var player, _i, _len, _ref, _results;
    _ref = this.universe.players;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      player = _ref[_i];
      if (player !== this) {
        this.target = player;
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return AiPlayer;

})(Player);

module.exports = AiPlayer;

});
