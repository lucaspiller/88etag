define(function(require, exports, module){
// Generated by CoffeeScript 1.3.1
var CommandCentre, CommandCentreInner, Indicator, Movable, Player, PlayerShip,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Movable = require('../movable');

PlayerShip = (function(_super) {

  __extends(PlayerShip, _super);

  PlayerShip.name = 'PlayerShip';

  PlayerShip.prototype.healthRadius = 8;

  PlayerShip.prototype.maxHealth = 1000;

  PlayerShip.prototype.radius = 10;

  PlayerShip.prototype.mass = 10;

  PlayerShip.prototype.max_speed = 2;

  PlayerShip.prototype.max_accel = 0.05;

  function PlayerShip(options) {
    PlayerShip.__super__.constructor.call(this, options);
    this.parent = options.parent;
    this.acceleration = new THREE.Vector3(0, 0, 0);
    this.position.y = this.parent.commandCentre.position.y - CommandCentre.prototype.radius - this.radius - 1;
    this.rotation = Math.PI * 1.5;
    this.mesh.rotateAboutObjectAxis(THREE.AxisZ, this.rotation);
    this.bulletDelay = 0;
  }

  PlayerShip.prototype.buildMesh = function() {
    var material;
    material = new THREE.MeshLambertMaterial({
      ambient: 0x5E574B,
      color: 0x5E574B
    });
    return new THREE.Mesh(this.controller.geometries['models/ship_basic.js'], material);
  };

  PlayerShip.prototype.rotateLeft = function() {
    return this.rotationalVelocity = Math.PI / 64;
  };

  PlayerShip.prototype.rotateRight = function() {
    return this.rotationalVelocity = -Math.PI / 64;
  };

  PlayerShip.prototype.forward = function() {
    var accel;
    this.acceleration.x = Math.cos(this.rotation);
    this.acceleration.y = Math.sin(this.rotation);
    accel = this.acceleration.length();
    if (accel > this.max_accel) {
      this.acceleration.multiplyScalar(this.max_accel / accel);
    }
    this.universe.trails.newShipTrail(this);
    return this.mesh.rotateAboutObjectAxis(THREE.AxisX, Math.PI / 128);
  };

  PlayerShip.prototype.backward = function() {
    var accel;
    this.acceleration.x = -Math.cos(this.rotation);
    this.acceleration.y = -Math.sin(this.rotation);
    accel = this.acceleration.length();
    if (accel > this.max_accel) {
      this.acceleration.multiplyScalar(this.max_accel / accel);
    }
    this.universe.trails.newShipTrail(this);
    return this.mesh.rotateAboutObjectAxis(THREE.AxisX, -Math.PI / 128);
  };

  PlayerShip.prototype.fire = function() {
    if (this.bulletDelay <= 0) {
      this.universe.bullets.newShipBullet(this);
      return this.bulletDelay = 10;
    }
  };

  PlayerShip.prototype.step = function() {
    var speed;
    this.bulletDelay--;
    this.velocity.addSelf(this.acceleration);
    this.acceleration.multiplyScalar(0);
    speed = this.velocity.length();
    if (speed > this.max_speed) {
      this.velocity.multiplyScalar(this.max_speed / speed);
    }
    if (Math.abs(this.rotationalVelocity) > 0.01) {
      this.rotationalVelocity *= 0.9;
    } else {
      this.rotationalVelocity = 0;
    }
    return PlayerShip.__super__.step.apply(this, arguments);
  };

  PlayerShip.prototype.explode = function() {
    PlayerShip.__super__.explode.apply(this, arguments);
    return this.parent.respawn();
  };

  return PlayerShip;

})(Movable);

CommandCentreInner = (function() {

  CommandCentreInner.name = 'CommandCentreInner';

  CommandCentreInner.prototype.rotationalVelocity = -Math.PI / 512;

  function CommandCentreInner(options) {
    this.controller = options.controller;
    this.universe = options.universe;
    this.mesh = this.buildMesh();
    this.position = this.mesh.position = new THREE.Vector3(0, 0, 500);
    if (options.position) {
      this.position.x = this.mesh.position.x = options.position.x;
      this.position.y = this.mesh.position.y = options.position.y;
    }
    this.controller.scene.add(this.mesh);
  }

  CommandCentreInner.prototype.remove = function() {
    return this.controller.scene.remove(this.mesh);
  };

  CommandCentreInner.prototype.buildMesh = function() {
    var material;
    material = new THREE.MeshFaceMaterial;
    return new THREE.Mesh(this.controller.geometries['models/command_centre_inner.js'], material);
  };

  CommandCentreInner.prototype.step = function() {
    return this.mesh.rotateAboutWorldAxis(THREE.AxisZ, this.rotationalVelocity);
  };

  return CommandCentreInner;

})();

CommandCentre = (function(_super) {

  __extends(CommandCentre, _super);

  CommandCentre.name = 'CommandCentre';

  CommandCentre.prototype.mass = 999999999999999999;

  CommandCentre.prototype.healthRadius = 25;

  CommandCentre.prototype.maxHealth = 10000;

  CommandCentre.prototype.radius = 50;

  CommandCentre.prototype.rotationalVelocity = Math.PI / 512;

  function CommandCentre(options) {
    this.parent = options.parent;
    this.inner = new CommandCentreInner(options);
    CommandCentre.__super__.constructor.call(this, options);
    if (options.position) {
      this.position.x = this.mesh.position.x = options.position.x;
      this.position.y = this.mesh.position.y = options.position.y;
    }
  }

  CommandCentre.prototype.buildMesh = function() {
    var material;
    material = new THREE.MeshFaceMaterial;
    return new THREE.Mesh(this.controller.geometries['models/command_centre.js'], material);
  };

  CommandCentre.prototype.remove = function() {
    CommandCentre.__super__.remove.apply(this, arguments);
    return this.inner.remove();
  };

  CommandCentre.prototype.explode = function() {
    return this.parent.remove();
  };

  CommandCentre.prototype.step = function() {
    CommandCentre.__super__.step.apply(this, arguments);
    this.inner.position.set(this.position.x, this.position.y, this.position.z);
    return this.inner.step();
  };

  return CommandCentre;

})(Movable);

Indicator = (function() {

  Indicator.name = 'Indicator';

  function Indicator(options) {
    var _ref;
    this.controller = options.controller;
    this.universe = options.universe;
    this.parent = options.parent;
    this.element = document.createElement('div');
    $(this.element).addClass('indicator');
    this.controller.container.appendChild(this.element);
    _ref = this.controller.screen_range(600), this.range_x = _ref[0], this.range_y = _ref[1];
  }

  Indicator.prototype.step = function() {
    var camera_x_max, camera_x_min, camera_y_max, camera_y_min, position, x, xOff, y, yOff;
    if (this.parent === this.universe.player) {
      $(this.element).addClass('player');
    }
    camera_x_min = this.controller.camera_x_min(this.range_x);
    camera_x_max = this.controller.camera_x_max(this.range_x);
    camera_y_min = this.controller.camera_y_min(this.range_y);
    camera_y_max = this.controller.camera_y_max(this.range_y);
    position = this.parent.commandCentre.position;
    xOff = true;
    yOff = true;
    if (position.x < camera_x_min) {
      x = 0;
    } else if (position.x > camera_x_max) {
      x = this.controller.width();
    } else {
      x = ((position.x - camera_x_min) / this.range_x) * this.controller.width();
      xOff = false;
    }
    if (position.y < camera_y_min) {
      y = this.controller.height();
    } else if (position.y > camera_y_max) {
      y = 0;
    } else {
      y = (1 - ((position.y - camera_y_min) / this.range_y)) * this.controller.height();
      yOff = false;
    }
    if (yOff || xOff) {
      return $(this.element).css({
        'top': y - 10,
        'left': x - 10
      });
    } else {
      return $(this.element).css({
        'top': -20,
        'left': -20
      });
    }
  };

  Indicator.prototype.remove = function() {
    return $(this.element).remove();
  };

  return Indicator;

})();

Player = (function() {

  Player.name = 'Player';

  function Player(options) {
    this.options = options;
    options.parent = this;
    this.universe = options.universe;
    this.controller = options.controller;
    this.commandCentre = new CommandCentre(options);
    this.indicator = new Indicator(options);
    this.buildShip();
  }

  Player.prototype.buildShip = function() {
    return this.ship = new PlayerShip(this.options);
  };

  Player.prototype.step = function() {
    this.indicator.step();
    if (!this.ship) {
      if (this.respawnDelay <= 0) {
        return this.buildShip();
      } else {
        return this.respawnDelay--;
      }
    }
  };

  Player.prototype.respawn = function() {
    this.ship = false;
    return this.respawnDelay = 300;
  };

  Player.prototype.remove = function() {
    this.commandCentre.remove();
    this.indicator.remove();
    this.ship.remove();
    this.ship = false;
    return this.universe.removePlayer(this);
  };

  return Player;

})();

module.exports = Player;

});
